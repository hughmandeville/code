{"version":3,"sources":["Nav.js","Lock.js","Level.js","Timer.js","App.js","serviceWorker.js","index.js"],"names":["Nav","level","levels","setInputStates","setLevel","setLockStatus","setShowHint","percentComplete","Math","round","length","id","href","window","location","pathname","style","width","onClick","GotoNextLevel","Lock","lockStatus","key","className","handleInputChange","completed","i","inputRefs","inputStates","puzzle","states","toString","toUpperCase","current","value","findIncorrect","findIndex","input","focus","forEach","blur","trues","reduce","accumulator","state","Level","levelData","hint","inlay","useState","showHint","image","title","useEffect","document","querySelector","src","alt","slice","map","n","newRef","createRef","push","ref","border","type","onChange","e","Timer","seconds","setSeconds","interval","setInterval","clearInterval","floor","randSlice","a","start","random","getFibonacciSequence","Array","App","name","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a89453e9.chunk.js","sourcesContent":["import React from \"react\";\nimport { GotoNextLevel } from \"./Level\";\nimport \"./Nav.css\";\n\nconst Nav = ({\n  level,\n  levels,\n  setInputStates,\n  setLevel,\n  setLockStatus,\n  setShowHint,\n}) => {\n  const percentComplete = Math.round((level / levels.length) * 100) + \"%\";\n  if (level === levels.length) {\n    return (\n      <>\n        <nav id=\"nav\">\n          <a href={window.location.pathname}>Code</a>\n        </nav>\n        <div id=\"completion_line\" style={{ width: \"100%\" }}></div>\n      </>\n    );\n  }\n  return (\n    <>\n      <nav id=\"nav\">\n        <a href={window.location.pathname}>Code</a>\n        <div id=\"level\">\n          Level {level + 1} / {levels.length}\n        </div>\n        <div\n          id=\"cheat\"\n          onClick={() => {\n            GotoNextLevel(\n              level,\n              setInputStates,\n              setLevel,\n              setLockStatus,\n              setShowHint\n            );\n          }}\n        >\n          &gt;\n        </div>\n        <div\n          id=\"hint_button\"\n          onClick={() => {\n            setShowHint(true);\n          }}\n        >\n          hint\n        </div>\n      </nav>\n      <div id=\"completion_line\" style={{ width: percentComplete }}></div>\n    </>\n  );\n};\n\nexport default Nav;\n","import React from \"react\";\n\nimport { GotoNextLevel } from \"./Level\";\nimport \"./Lock.css\";\n\nconst Lock = ({\n  level,\n  lockStatus,\n  setInputStates,\n  setLevel,\n  setLockStatus,\n  setShowHint,\n}) => {\n  if (lockStatus === \"locked\") {\n    return (\n      <div id=\"lock_box\" key=\"lockbox\">\n        <span id=\"lock\" className=\"material-icons\">\n          lock\n        </span>\n      </div>\n    );\n  } else {\n    return (\n      <div\n        id=\"lock_box\"\n        key=\"lockbox\"\n        onClick={() => {\n          GotoNextLevel(\n            level,\n            setInputStates,\n            setLevel,\n            setLockStatus,\n            setShowHint\n          );\n        }}\n      >\n        <span id=\"lock\" className=\"material-icons open\">\n          lock_open\n        </span>\n        <div className=\"next_text\">next&nbsp;&gt;&gt;</div>\n      </div>\n    );\n  }\n};\n\nexport default Lock;\n","import React, { createRef, useState, useEffect } from \"react\";\nimport \"./Level.css\";\nimport Nav from \"./Nav\";\nimport Lock from \"./Lock\";\n\nconst Level = ({ level, levels, setLevel }) => {\n  const levelData =\n    level >= levels.length\n      ? { hint: \"\", puzzle: [], completed: 4 }\n      : levels[level];\n  const { completed, inlay, puzzle } = levelData;\n  const [showHint, setShowHint] = useState(0);\n  const [lockStatus, setLockStatus] = useState(\"locked\");\n  const [inputStates, setInputStates] = useState([]);\n  const inputRefs = [];\n  const { hint, image, title } = levelData;\n\n  useEffect(() => {\n    if (inputStates.length === 0 && document.querySelector(\"input\") != null) {\n      document.querySelector(\"input\").focus();\n    }\n  }, [inputStates]);\n\n  if (level === levels.length) {\n    return (\n      <>\n        <Nav\n          level={level}\n          levels={levels}\n          setInputStates={setInputStates}\n          setLevel={setLevel}\n          setLockStatus={setLockStatus}\n          showHint={showHint}\n          setShowHint={setShowHint}\n        />\n        <div id=\"title\">🤓 🤪 🤓 🤪 🤓 🤪 🤓</div>\n        <div id=\"boxes\" className=\"won\">\n          Congratulations!\n          <br />\n          You completed all the challenges!\n        </div>\n      </>\n    );\n  }\n  return (\n    <>\n      <Nav\n        level={level}\n        levels={levels}\n        setInputStates={setInputStates}\n        setLevel={setLevel}\n        setLockStatus={setLockStatus}\n        showHint={showHint}\n        setShowHint={setShowHint}\n      />\n      <div id=\"title\">{image ? <img src={image} alt={title} /> : title}</div>\n      <div id=\"hint\">{showHint ? <span>{hint}</span> : \"\"}</div>\n      <div id=\"boxes\">\n        {puzzle.slice(0, completed).map((n, i) => (\n          <div key={\"box\" + i} className=\"box\">\n            {n}\n            {inlay != null && inlay.length >= i ? (\n              <div className=\"inlay\">{inlay[i]}</div>\n            ) : (\n              \"\"\n            )}\n          </div>\n        ))}\n        {puzzle.slice(completed).map((n, i) => {\n          const newRef = createRef();\n          inputRefs.push(newRef);\n          return (\n            <div key={\"box\" + (completed + i)} className=\"input_box\">\n              <input\n                key={\"level\" + level + \"-input\" + (completed + i)}\n                ref={newRef}\n                style={\n                  inputStates.length >= i && inputStates[i] === \"correct\"\n                    ? { border: \"1px solid green\" }\n                    : {}\n                }\n                type=\"text\"\n                className=\"input\"\n                onChange={(e) => {\n                  handleInputChange(\n                    completed,\n                    i,\n                    inputRefs,\n                    inputStates,\n                    puzzle,\n                    setInputStates,\n                    setLockStatus\n                  );\n                }}\n              />\n              {inlay != null && inlay.length >= i ? (\n                <div className=\"inlay\">{inlay[completed + i]}</div>\n              ) : (\n                \"\"\n              )}\n            </div>\n          );\n        })}\n        <Lock\n          level={level}\n          lockStatus={lockStatus}\n          setInputStates={setInputStates}\n          setLevel={setLevel}\n          setLockStatus={setLockStatus}\n          setShowHint={setShowHint}\n        ></Lock>\n      </div>\n    </>\n  );\n};\n\n// Called when input text is changed.\nconst handleInputChange = (\n  completed,\n  i,\n  inputRefs,\n  inputStates,\n  puzzle,\n  setInputStates,\n  setLockStatus\n) => {\n  const states = [...inputStates];\n  if (\n    puzzle[completed + i].toString().toUpperCase() ===\n    inputRefs[i].current.value.toUpperCase()\n  ) {\n    states[i] = \"correct\";\n    const findIncorrect = inputRefs.findIndex(\n      (input, i) => states[i] !== \"correct\"\n    );\n    if (findIncorrect !== -1) {\n      inputRefs[findIncorrect].current.focus();\n    } else {\n      inputRefs.forEach((input) => input.current.blur());\n    }\n  } else {\n    states[i] = \"incorrect\";\n  }\n  setInputStates(states);\n\n  let trues = 0;\n  if (states.length === puzzle.length - completed) {\n    trues = states.reduce(function (accumulator, state) {\n      if (state === \"correct\") {\n        return accumulator + 1;\n      }\n      return accumulator;\n    }, 0);\n  }\n  if (trues === puzzle.length - completed) {\n    setLockStatus(\"unlocked\");\n  } else {\n    setLockStatus(\"locked\");\n  }\n};\n\n// Go to next level.\nexport const GotoNextLevel = (\n  level,\n  setInputStates,\n  setLevel,\n  setLockStatus,\n  setShowHint\n) => {\n  setLockStatus(\"locked\");\n  setShowHint(0);\n  setLevel(level + 1);\n  setInputStates([]);\n};\n\nexport default Level;\n","import React, { useEffect, useState } from \"react\";\nimport \"./Timer.css\";\n\nconst Timer = () => {\n  const [seconds, setSeconds] = useState(0);\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setSeconds((seconds) => seconds + 1);\n    }, 1000);\n    return () => clearInterval(interval);\n  }, []);\n  return (\n    <footer id=\"timer\">\n      {Math.floor(seconds / 60)}.{seconds % 60 < 10 ? \"0\" : \"\"}\n      {seconds % 60}\n    </footer>\n  );\n};\n\nexport default Timer;\n","import React, { useState } from \"react\";\nimport Level from \"./Level\";\nimport Timer from \"./Timer\";\nimport \"./index.css\";\n\nconst App = () => {\n  const levels = getLevels();\n  const [level, setLevel] = useState(0);\n  return (\n    <>\n      <Level level={level} levels={levels} setLevel={setLevel} />\n      <Timer />\n    </>\n  );\n};\n\n// construct array of levels.\nfunction getLevels() {\n  return [\n    {\n      name: \"roman_numerals\",\n      puzzle: randSlice(\n        [\n          \"I\",\n          \"II\",\n          \"III\",\n          \"IV\",\n          \"V\",\n          \"VI\",\n          \"VII\",\n          \"VIII\",\n          \"IX\",\n          \"X\",\n          \"XI\",\n          \"XII\",\n          \"XIII\",\n          \"XIV\",\n        ],\n        6\n      ),\n      hint: \"togas\",\n      completed: 4,\n    },\n    {\n      name: \"square\",\n      puzzle: randSlice([1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144], 6),\n      hint: \"square\",\n      completed: 3,\n    },\n    {\n      name: \"morse\",\n      puzzle: [\"S\", \"O\", \"S\"],\n      inlay: [\"...\", \"---\", \"...\"],\n      hint: \"telegraph\",\n      completed: 0,\n    },\n    {\n      name: \"amscray\",\n      title: \"amscray\",\n      puzzle: [\"S\", \"C\", \"R\", \"A\", \"M\"],\n      hint: \"Pig Latin\",\n      completed: 0,\n    },\n    {\n      name: \"ixnay\",\n      title: \"ixnay\",\n      puzzle: [\"N\", \"I\", \"X\"],\n      hint: \"Pig Latin\",\n      completed: 0,\n    },\n    {\n      name: \"baked\",\n      title: \"Baked in Cockney\",\n      puzzle: [\"Q\", \"U\", \"E\", \"E\", \"N\"],\n      hint: \"Baked Bean\",\n      completed: 0,\n    },\n    {\n      name: \"barney\",\n      title: \"Barney in Cockney\",\n      puzzle: [\"T\", \"R\", \"O\", \"U\", \"B\", \"L\", \"E\"],\n      hint: \"Barney Rubble\",\n      completed: 0,\n    },\n    {\n      name: \"china\",\n      title: \"China in Cockney\",\n      puzzle: [\"M\", \"A\", \"T\", \"E\"],\n      hint: \"China Plate\",\n      completed: 0,\n    },\n    {\n      name: \"olavtine\",\n      puzzle: [\"O\", \"L\", \"A\", \"V\", \"T\", \"I\", \"N\", \"E\"],\n      inlay: [\"B\", \"I\", \"N\", \"Y\", \"G\", \"V\", \"A\", \"R\"],\n      hint: \"ROT13\",\n      completed: 2,\n    },\n    {\n      name: \"ascii\",\n      puzzle: [\"S\", \"W\", \"O\", \"R\", \"D\", \"F\", \"I\", \"S\", \"H\"],\n      inlay: [83, 87, 79, 82, 68, 70, 73, 83, 72],\n      hint: \"ASCII art\",\n      completed: 1,\n    },\n    {\n      name: \"rgb\",\n      image: \"/code/img_red.png\",\n      puzzle: [\"FF\", \"00\", \"00\"],\n      hint: \"RGB\",\n      completed: 0,\n    },\n    {\n      name: \"phone\",\n      puzzle: [7, 8, 6, 4, 6, 4],\n      inlay: [\"Q\", \"U\", \"O\", \"H\", \"O\", \"G\"],\n      hint: \"Spongebob's flip phone\",\n      completed: 2,\n    },\n    {\n      name: \"emojis\",\n      puzzle: [\"🙂\", \"🙃\", \"🙂\", \"🙃\", \"🙂\", \"🙃\"],\n      hint: \"cut copy\",\n      completed: 4,\n    },\n    {\n      name: \"fibonacci\",\n      puzzle: randSlice(getFibonacciSequence(12), 6),\n      hint: \"Fibonacci\",\n      completed: 4,\n    },\n    {\n      name: \"pi\",\n      puzzle: [3, 1, 4, 1, 5, 9],\n      hint: \"have some pie\",\n      completed: 4,\n    },\n    {\n      name: \"prime\",\n      puzzle: randSlice(\n        [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53],\n        6\n      ),\n      hint: \"Amazon prime\",\n      completed: 4,\n    },\n    {\n      name: \"binary\",\n      puzzle: randSlice(\n        [\"000\", \"001\", \"010\", \"011\", \"100\", \"101\", \"110\", \"111\"],\n        6\n      ),\n      hint: \"binary\",\n      completed: 3,\n    },\n    {\n      name: \"days_of_week\",\n      puzzle: randSlice(\n        [\"M\", \"T\", \"W\", \"T\", \"F\", \"S\", \"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\", \"S\"],\n        6\n      ),\n      hint: \"days of week\",\n      completed: 4,\n    },\n    {\n      name: \"numbers\",\n      puzzle: randSlice([\"Z\", \"O\", \"T\", \"T\", \"F\", \"F\", \"S\", \"S\", \"E\", \"N\"], 6),\n      hint: \"numbers\",\n      completed: 4,\n    },\n    {\n      name: \"months\",\n      puzzle: randSlice(\n        [\n          \"J\",\n          \"F\",\n          \"M\",\n          \"A\",\n          \"M\",\n          \"J\",\n          \"J\",\n          \"A\",\n          \"S\",\n          \"O\",\n          \"N\",\n          \"D\",\n          \"J\",\n          \"F\",\n          \"M\",\n          \"A\",\n          \"M\",\n          \"J\",\n          \"J\",\n          \"A\",\n          \"S\",\n          \"O\",\n          \"N\",\n          \"D\",\n        ],\n        6\n      ),\n      hint: \"months\",\n      completed: 4,\n    },\n    {\n      name: \"lost\",\n      image: \"/code/img_lost.jpg\",\n      puzzle: [\"4\", \"8\", \"15\", \"16\", \"23\", \"42\"],\n      hint: \"TV show from mid 2000s\",\n      completed: 4,\n    },\n    /*\n    {\n      name: \"atbash\",\n      puzzle: [\"B\", \"U\", \"P\", \"K\", \"I\", \"S\"],\n      inlay: [\"Y\", \"F\", \"K\", \"P\", \"R\", \"H\"],\n      hint: \"Atbash\",\n      completed: 3,\n    },\n    {\n      name: \"log\",\n      puzzle: [2, 7, 1, 8, 2, 8],\n      hint: \"timber\",\n      completed: 4,\n    },\n    */\n  ];\n}\n\n// Get random slice of N elements.\nconst randSlice = (a, n) => {\n  if (a.length <= n) {\n    return a;\n  }\n  const start = Math.floor(Math.random() * (a.length - n));\n  return a.slice(start, start + n);\n};\n\n// Get sequence of N Fibonacci numbers.\n// 0 1 1 2 3 5 8 13 21 34 55 89 ...\nconst getFibonacciSequence = (n) => {\n  return [...Array(n - 2)].reduce(\n    (a) => {\n      a.push(a[a.length - 2] + a[a.length - 1]);\n      return a;\n    },\n    [0, 1]\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}